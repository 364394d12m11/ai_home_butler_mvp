// miniprogram/pages/diet/taste-setup/index.js
Page({
  data: {
    profile: {
      consumptionLevel: 'value', // budget/value/quality/luxury
      aesthetic: 'homestyle', // homestyle/trendy/healthy/gourmet
      cuisines: ['‰∏≠Âºè', 'ÂÆ∂Â∏∏'], // Â§öÈÄâ
      maxSpicy: 1, // 0-3
      flavors: ['Ê∏ÖÊ∑°', 'Âí∏È≤ú'], // Â§öÈÄâ
      complexity: 2, // 1-5
      exploration: 'moderate', // conservative/moderate/adventurous
      allergies: '', // ÊñáÊú¨ËæìÂÖ•
      dailyBudget: 0 // Êï∞Â≠ó
    },
    
    cuisineOptions: ['‰∏≠Âºè', 'Â∑ùËèú', 'Á≤§Ëèú', 'ÊπòËèú', '‰∏úÂåóËèú', 'Ë•øÂºè', 'Êó•Âºè', 'Èü©Âºè', '‰∏úÂçó‰∫ö', 'ÂÆ∂Â∏∏'],
    flavorOptions: ['Ê∏ÖÊ∑°', 'Âí∏È≤ú', 'ÈÖ∏Áîú', 'È∫ªËæ£', 'È¶ôËæ£', 'È≤úÁæé', 'Ê∏ÖÈ¶ô', 'ÊµìÈÉÅ'],
    complexityLabels: ['', 'ÊûÅÁÆÄ', 'ÁÆÄÂçï', 'ÈÄÇ‰∏≠', 'Â§çÊùÇ', 'Â§ßÂ∏àÁ∫ß'],
      // Êñ∞Â¢ûËøô‰∏§Ë°å
  cuisineSelected: {},
  flavorSelected: {}
  },

  onLoad() {
    this.loadExistingProfile()
    this.initSelectedStates()
  },

  // Âä†ËΩΩÁé∞ÊúâËÆæÁΩÆ
  loadExistingProfile() {
    try {
      const existingProfile = wx.getStorageSync('TASTE_PROFILE')
      if (existingProfile) {
        this.setData({ profile: { ...this.data.profile, ...existingProfile } })
      }
    } catch (e) {
      console.error('Âä†ËΩΩË∞ÉÊÄßËÆæÁΩÆÂ§±Ë¥•:', e)
    }
  },
  // ÂàùÂßãÂåñÈÄâ‰∏≠Áä∂ÊÄÅ
initSelectedStates() {
  const cuisineSelected = {}
  const flavorSelected = {}
  
  this.data.profile.cuisines.forEach(item => {
    cuisineSelected[item] = true
  })
  
  this.data.profile.flavors.forEach(item => {
    flavorSelected[item] = true
  })
  
  this.setData({
    cuisineSelected,
    flavorSelected
  })
},

  // ËÆæÁΩÆÊ∂àË¥πÂ±ÇÁ∫ß
  setConsumptionLevel(e) {
    const level = e.currentTarget.dataset.level
    console.log('ËÆæÁΩÆÊ∂àË¥πÂ±ÇÁ∫ß:', level)
    this.setData({ 'profile.consumptionLevel': level })
  },

  // ËÆæÁΩÆÈ£éÊ†ºÂÅèÂ•Ω
  setAesthetic(e) {
    const aesthetic = e.currentTarget.dataset.aesthetic
    console.log('ËÆæÁΩÆÈ£éÊ†ºÂÅèÂ•Ω:', aesthetic)
    this.setData({ 'profile.aesthetic': aesthetic })
  },

  toggleCuisine(e) {
    const cuisine = e.currentTarget.dataset.cuisine
    const selected = !this.data.cuisineSelected[cuisine]
    
    this.setData({
      [`cuisineSelected.${cuisine}`]: selected
    })
    
    // ÂêåÊ≠•Êõ¥Êñ∞Êï∞ÁªÑ
    const cuisines = Object.keys(this.data.cuisineSelected).filter(key => 
      key === cuisine ? selected : this.data.cuisineSelected[key]
    )
    
    this.setData({
      'profile.cuisines': cuisines
    })
  },

  // ËÆæÁΩÆËæ£Â∫¶‰∏äÈôê
  setMaxSpicy(e) {
    const level = parseInt(e.currentTarget.dataset.level)
    console.log('ËÆæÁΩÆËæ£Â∫¶:', level)
    this.setData({ 'profile.maxSpicy': level })
  },

  // ÂàáÊç¢Âè£Âë≥ÂÅèÂ•Ω - ‰øÆÂ§çÁâà
  toggleFlavor(e) {
    const flavor = e.currentTarget.dataset.flavor
    const selected = !this.data.flavorSelected[flavor]
    
    this.setData({
      [`flavorSelected.${flavor}`]: selected
    })
    
    // ÂêåÊ≠•Êõ¥Êñ∞Êï∞ÁªÑ
    const flavors = Object.keys(this.data.flavorSelected).filter(key => 
      key === flavor ? selected : this.data.flavorSelected[key]
    )
    
    this.setData({
      'profile.flavors': flavors
    })
  },

  // ËÆæÁΩÆÂ§çÊùÇÂ∫¶
  setComplexity(e) {
    const complexity = parseInt(e.detail.value)
    console.log('ËÆæÁΩÆÂ§çÊùÇÂ∫¶:', complexity)  // Âä†Ëøô‰∏ÄË°å
    this.setData({ 'profile.complexity': complexity })
  },

  // ËÆæÁΩÆÊé¢Á¥¢Â∫¶
  setExploration(e) {
    const level = e.currentTarget.dataset.level
    console.log('ËÆæÁΩÆÊé¢Á¥¢Â∫¶:', level)
    this.setData({ 'profile.exploration': level })
  },

  // Êõ¥Êñ∞ËøáÊïèÂøåÂè£
  updateAllergies(e) {
    this.setData({ 'profile.allergies': e.detail.value })
  },

  // Êõ¥Êñ∞È¢ÑÁÆó
  updateBudget(e) {
    const budget = parseFloat(e.detail.value) || 0
    this.setData({ 'profile.dailyBudget': budget })
  },

  // È¢ÑËßàÊé®ËçêÊïàÊûú
  async previewRecommendation() {
    wx.showLoading({ title: 'ÁîüÊàêÈ¢ÑËßà...', mask: true })
    
    try {
      // Ê®°ÊãüÂü∫‰∫éË∞ÉÊÄßÁöÑÊé®Ëçê
      const mockRecommendations = this.generateMockRecommendations()
      
      setTimeout(() => {
        wx.hideLoading()
        wx.showModal({
          title: 'Êé®ËçêÈ¢ÑËßà',
          content: `Âü∫‰∫éÊÇ®ÁöÑËÆæÁΩÆÔºå‰∏∫ÊÇ®Êé®ËçêÔºö\n${mockRecommendations.join('\n')}`,
          showCancel: false,
          confirmText: '‰∏çÈîô'
        })
      }, 1500)
      
    } catch (e) {
      wx.hideLoading()
      wx.showToast({ title: 'È¢ÑËßàÂ§±Ë¥•', icon: 'none' })
    }
  },

  // ÁîüÊàêÊ®°ÊãüÊé®Ëçê
  generateMockRecommendations() {
    const { profile } = this.data
    const recommendations = []
    
    // Âü∫‰∫éÊ∂àË¥πÂ±ÇÁ∫ß
    if (profile.consumptionLevel === 'budget') {
      recommendations.push('ü•î ÈùíÊ§íÂúüË±Ü‰∏ù (ÁªèÊµéÂÆûÊÉ†)')
    } else if (profile.consumptionLevel === 'luxury') {
      recommendations.push('ü•© ÈªëÊ§íÁâõÊéí (ÂìÅË¥®‰ºòÈÄâ)')
    } else {
      recommendations.push('üçó ÂÆ´‰øùÈ∏°‰∏Å (ÊÄß‰ª∑ÊØî‰πãÈÄâ)')
    }
    
    // Âü∫‰∫éÈ£éÊ†ºÂÅèÂ•Ω
    if (profile.aesthetic === 'healthy') {
      recommendations.push('ü•ó Ëî¨ËèúÊ≤ôÊãâ (ÂÅ•Â∫∑Ê∏ÖÊ∑°)')
    } else if (profile.aesthetic === 'gourmet') {
      recommendations.push('üç§ ÁôΩÁÅºËôæ (Á≤æËá¥Âà∂‰Ωú)')
    } else {
      recommendations.push('üçÖ Ë•øÁ∫¢ÊüøÁÇíËõã (ÂÆ∂Â∏∏ÁæéÂë≥)')
    }
    
    // Âü∫‰∫éËæ£Â∫¶
    if (profile.maxSpicy >= 2) {
      recommendations.push('üå∂Ô∏è È∫ªÂ©ÜË±ÜËÖê (ÂæÆËæ£ÂºÄËÉÉ)')
    } else {
      recommendations.push('ü•¶ ËíúËìâË•øÂÖ∞Ëä± (Ê∏ÖÈ¶ô‰∏çËæ£)')
    }
    
    return recommendations
  },

  // ‰øùÂ≠òËÆæÁΩÆ
  async saveProfile() {
    const { profile } = this.data
    
    // È™åËØÅÂøÖÂ°´È°π
    if (!profile.consumptionLevel || !profile.aesthetic) {
      wx.showToast({ title: 'ËØ∑ÂÆåÊàêÂü∫Á°ÄËÆæÁΩÆ', icon: 'none' })
      return
    }
    
    if (profile.cuisines.length === 0) {
      wx.showToast({ title: 'ËØ∑Ëá≥Â∞ëÈÄâÊã©‰∏ÄÁßçËèúÁ≥ª', icon: 'none' })
      return
    }
    
    wx.showLoading({ title: '‰øùÂ≠ò‰∏≠...', mask: true })
    
    try {
      // ‰øùÂ≠òÂà∞Êú¨Âú∞
      wx.setStorageSync('TASTE_PROFILE', profile)
      
      // Ê®°Êãü‰∏ä‰º†Âà∞‰∫ëÁ´Ø
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      wx.showToast({ title: '‰øùÂ≠òÊàêÂäü', icon: 'success' })
      
      // ËøîÂõû‰∏äÁ∫ßÈ°µÈù¢
      setTimeout(() => {
        wx.navigateBack()
      }, 1500)
      
    } catch (e) {
      wx.showToast({ title: '‰øùÂ≠òÂ§±Ë¥•', icon: 'none' })
    } finally {
      wx.hideLoading()
    }
  }
})